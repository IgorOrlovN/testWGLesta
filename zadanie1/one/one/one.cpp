
#include <iostream>
#include <string>
#include <chrono>


using namespace std;

bool parity(int value)
{
	if (value % 2 == 0)
		cout << value << " число четное";
	else
		cout << value << " число не четное";
	return 0;
}
int main()
{

	setlocale(LC_ALL, "Russian");
	
	auto start = chrono::high_resolution_clock::now();

	parity(10);

	auto end = chrono::high_resolution_clock::now();
	
	chrono::duration<float> difference = end - start;
	cout << " Difference " << difference.count() << " s" << endl;

}

// Сравним код написанный мной выше и код представленный в тестовом задании: bool isEven(int value) { return value % 2 == 0; }
// Плюсы кода приведенного в задании в его локаничности и скорости выполнения. Т.к. если обратиться к средтвам анализа использования ЦП в visual Studio, а именно к инстроментам диагностики(используя точки остонова на участке кода с выполнением данных функций)
// можно оценить, что время затраченное на выполнение функци написанной в моём коде 3 мс, а функция написанная в тестовом задании затрачивает всего 1 мс. Для более точного измерения скорости выполнения участка кода можно подключить библиотеку "chrono",
// и узнать разницу между точками во времени до и после выполнения функции(этот способ представлен в моём коде). Как результат, функция написанная мной выполняется в среднем за 0.0014027 секудны, а функция isEven() за 1.1e-06 секунды (0.0000011 секунды).
// Это еще раз доказывает, что реализация bool isEven(int value) { return value % 2 == 0; выигрывает в скорости.
